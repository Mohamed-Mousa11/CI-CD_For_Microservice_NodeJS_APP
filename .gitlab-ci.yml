stages:
  - build
  - deploy


.build:
  image: docker:27.4.0-rc.2-cli
  stage: build
  services: 
    - docker:27.4.0-rc.2-dind 
  script:
    - apk add --no-cache jq httpie
    - export MS_JSON_VERSION=$(cat $MS_DIRECTORY/package.json | jq -r .version )
      # Saving Version in package.json file

    - export VERSION=$MS_JSON_VERSION.$CI_PIPELINE_ID
      #creating a versioned image for each microservice 
    - export MS_ENV=$MICROSERVICE
    - export MICROSERVICE_VERSION=$MICROSERVICE:$VERSION
    - echo "$MS_ENV=$MICROSERVICE_VERSION" >> environmental-variables.env
      # Saving the versioned image into an environmental file

    - docker build -t $CI_REGISTRY_IMAGE/$MICROSERVICE_VERSION $MS_DIRECTORY
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push $CI_REGISTRY_IMAGE/$MICROSERVICE_VERSION
  variables:
    MICROSERVICE: ""
    MS_DIRECTORY: ""
  artifacts:
    reports:
      dotenv: environmental-variables.env



build_frontend:
  extends: .build
  variables:
    MICROSERVICE: frontend
    MS_DIRECTORY: frontend-Dir


build_products:
  extends: .build
  variables:
    MICROSERVICE: products
    MS_DIRECTORY: products-Dir

build_shoppingcart:
  extends: .build
  variables:
    MICROSERVICE: shoppingcart
    MS_DIRECTORY: shoppingcart-Dir



.deploy:
  image: docker:dind
  stage: deploy
  before_script:
    - export DC_IMAGE=$(eval echo \$$MICROSERVICE)
    # `eval echo`  takes a string and executes it as a shell command, can be used to resolve the second level of variable substitution
    # Ex: MICROSERVICE=frontend  -----.env file----->> frontend=frontend:1.0.0.1577975529 
    - echo $DC_IMAGE
    # TESTING THE NAME OF THE IMAGE OF EACH MICROSERVICE
    - chmod 400 $SSH_KEY
    - scp -o StrictHostKeyChecking=no -i $SSH_KEY ./docker-compose.yaml ec2-user@$HOST_IP:/home/ec2-user
    # SECURE COPY THE docker-compose.yaml file TO THE HOST SERVER
  script:
    - ssh -o StrictHostKeyChecking=no -i $SSH_KEY ec2-user@$HOST_IP "
        docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY &&
        export COMPOSE_PROJECT_NAME=$MICROSERVICE &&
        export DC_IMAGE=$CI_REGISTRY_IMAGE/$(eval echo \$$MICROSERVICE) &&
        export DC_PORT=$HOST_PORT &&
        export DC_CONTAINER_PORT=$CONTAINER_PORT &&
        docker network create microservice_network || true &&
        docker-compose -f docker-compose.yaml down &&
        docker-compose -f docker-compose.yaml up -d"

  variables:
    MICROSERVICE: ""
    DC_PORT: ""
    CONTAINER_PORT: ""




deploy_frontend:
  extends: .deploy
  variables:
    MICROSERVICE: frontend
    DC_PORT: 3000
    CONTAINER_PORT: 3000
  environment:
    name: front 
    url: http://$HOST_IP



deploy_products:
  extends: .deploy
  variables:
    MICROSERVICE: products
    DC_PORT: 4000
    CONTAINER_PORT: 3001
  environment:
    name: produc
    url: http://$HOST_IP

deploy_shopping_cart:
  extends: .deploy
  variables:
    MICROSERVICE: shoppingcart
    DC_PORT: 5000
    CONTAINER_PORT: 3002
  environment:
    name: shopping
    url: http://$HOST_IP
