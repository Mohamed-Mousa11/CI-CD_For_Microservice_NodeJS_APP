stages:
  - build
  - deploy

.build:
  image: docker:27.4.0-rc.2-cli
  stage: build
  services:
    - name: docker:dind
      alias: docker
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_CLIENT_TIMEOUT: 300
  script:
    - apk add --no-cache jq httpie
    - |
      # Extract version from package.json
      MS_JSON_VERSION=$(cat "$MS_DIR/package.json" | jq -r .version)

      # Generate a unique version tag
      VERSION="$MS_JSON_VERSION.$CI_PIPELINE_ID"

      # Ensure MS_ENV contains only valid characters (letters, digits, and underscores)
      MS_ENV=$(echo "${MICROSERVICE:-default_value}" | tr -cd '[:alnum:]_')

      # Generate a versioned image name
      MICROSERVICE_VERSION="$MS_ENV.$VERSION"

      # Save the versioned image name to an environment file
      echo "$MS_ENV=$MICROSERVICE_VERSION" > environmental-variables.env

      # Debugging: Print .env file before uploading
      echo "===== ENV FILE CONTENTS ====="
      cat environmental-variables.env
      echo "============================="

      # Validate .env file to ensure correct format
      if ! grep -qE "^[A-Za-z0-9_]+=.+$" environmental-variables.env; then
        echo "ERROR: Invalid .env file format. Exiting..." >&2
        exit 1
      fi
    - docker build -t "$CI_REGISTRY_IMAGE/$MICROSERVICE_VERSION:$VERSION" "$MS_DIR"
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
    - docker push "$CI_REGISTRY_IMAGE/$MICROSERVICE_VERSION:$VERSION"
  variables:
    MICROSERVICE: ""
    MS_VERSION: ""
    MS_DIR: ""
  artifacts:
    reports:
      dotenv: environmental-variables.env

build_frontend:
  extends: .build
  variables:
    MICROSERVICE: frontend
    MS_VERSION: 2.0
    MS_DIR: frontend-Dir

build_products:
  extends: .build
  variables:
    MICROSERVICE: products
    MS_VERSION: 2.0
    MS_DIR: products-Dir

build_shoppingcart:
  extends: .build
  variables:
    MICROSERVICE: shoppingcart
    MS_VERSION: 2.0
    MS_DIR: shoppingcart-Dir

.deploy:
  image: docker:dind
  stage: deploy
  variables:
    MICROSERVICE: ""
    DC_PORT: ""
    CONTAINER_PORT: ""
    DC_IMAGE: "$CI_REGISTRY_IMAGE/$(eval echo '\\$$MICROSERVICE')"
  before_script:
    - export DC_IMAGE=$(eval echo '\\$$MICROSERVICE')
    - echo $DC_IMAGE
    - chmod 400 $SSH_KEY
    - scp -o StrictHostKeyChecking=no -i $SSH_KEY ./docker-compose.yaml ec2-user@$HOST_IP:/home/ec2-user
  script:
    - ssh -o StrictHostKeyChecking=no -i $SSH_KEY ec2-user@$HOST_IP "
        echo \"$CI_REGISTRY_PASSWORD\" | docker login -u \"$CI_REGISTRY_USER\" --password-stdin \"$CI_REGISTRY\" &&
        export COMPOSE_PROJECT_NAME=$MICROSERVICE &&
        export DC_IMAGE=$CI_REGISTRY_IMAGE/$(eval echo '\\$$MICROSERVICE') &&
        export DC_PORT=$HOST_PORT &&
        export DC_CONTAINER_PORT=$CONTAINER_PORT &&
        docker network create microservice_network || true &&
        docker-compose -f docker-compose.yaml down &&
        docker-compose -f docker-compose.yaml up -d"

deploy_frontend:
  extends: .deploy
  variables:
    MICROSERVICE: frontend
    DC_PORT: 3000
    CONTAINER_PORT: 3000
  environment:
    name: production
    url: http://$HOST_IP

deploy_products:
  extends: .deploy
  variables:
    MICROSERVICE: products
    DC_PORT: 4000
    CONTAINER_PORT: 3001
  environment:
    name: production
    url: http://$HOST_IP

deploy_shoppingcart:
  extends: .deploy
  variables:
    MICROSERVICE: shoppingcart
    DC_PORT: 5000
    CONTAINER_PORT: 3002
  environment:
    name: production
    url: http://$HOST_IP